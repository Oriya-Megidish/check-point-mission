name: CI/CD for ECS Microservices

on:
  push:
    branches:
      - main

# Environment variables ברמה העליונה
env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  REST_SERVICE_ECR_REPO: ${{ secrets.ECR_REST_SERVICE_REPO_URI }}
  SQL_LISTENER_ECR_REPO: ${{ secrets.ECR_SQL_LISTENER_REPO_URI }}
  CLUSTER_NAME: ${{ secrets.OWNER }}-cluster
  REST_SERVICE_NAME: ${{ secrets.REST_SERVICE_NAME }}
  SQL_LISTENER_SERVICE_NAME: ${{ secrets.SQL_LISTENER_SERVICE_NAME }}


jobs:
  terraform:
    name: Terraform Apply
    runs-on: ubuntu-latest
    env:
      TF_VAR_account_id: ${{ secrets.ACCOUNT_ID }}
      TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
      TF_VAR_admin_role_arn: ${{ secrets.ADMIN_ROLE_ARN }}
      TF_VAR_token_parameter: ${{ secrets.TOKEN_VALUE }}
      TF_VAR_owner: ${{ secrets.OWNER }}

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: v1.4.6  

      - name: Cache Terraform providers and modules
        uses: actions/cache@v3
        with:
          path: infrastructure/.terraform
          key: ${{ runner.os }}-terraform-${{ hashFiles('infrastructure/**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Terraform Init
        working-directory: infrastructure/
        run: terraform init -input=false

      - name: Terraform Validate
        working-directory: infrastructure/
        run: terraform validate

      - name: Terraform Plan
        working-directory: infrastructure/
        run: terraform plan -out=tfplan -input=false -lock=true

      - name: Terraform Apply
        working-directory: infrastructure/
        run: terraform apply -auto-approve tfplan

  tests:
    name: Run Tests on Microservices
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - uses: actions/checkout@v3

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Test Rest service 
        run: |
          cd services/rest_service
          python3 -m pip install --upgrade pip
          pip install -r requirements.txt
          pytest tests/

      - name: Test Sql listener
        run: |
          cd services/sql_listener
          python3 -m pip install --upgrade pip
          pip install -r requirements.txt
          pytest tests/

  build_and_push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Rest service Docker Image
        run: |
          cd services/rest_service
          docker build -t $REST_SERVICE_ECR_REPO:latest .
          docker push $REST_SERVICE_ECR_REPO:latest

      - name: Build and Push Sql listener Docker Image
        run: |
          cd services/sql_listener
          docker build -t $SQL_LISTENER_ECR_REPO:latest .
          docker push $SQL_LISTENER_ECR_REPO:latest

  deploy:
    name: Deploy Services to ECS
    runs-on: ubuntu-latest
    needs: build_and_push

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy Rest service
        run: |
          aws ecs update-service --cluster $CLUSTER_NAME --service $REST_SERVICE_NAME --force-new-deployment

      - name: Deploy Sql listener
        run: |
          aws ecs update-service --cluster $CLUSTER_NAME --service $SQL_LISTENER_SERVICE_NAME --force-new-deployment
